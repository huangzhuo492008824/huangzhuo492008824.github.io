<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KevinHuang</title>
  
  <subtitle>KevinHuang的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.myhuangzhuo.com/"/>
  <updated>2023-11-07T08:12:35.137Z</updated>
  <id>https://www.myhuangzhuo.com/</id>
  
  <author>
    <name>Kevin Huang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chrome浏览器插件精选：开启高效上网的新纪元</title>
    <link href="https://www.myhuangzhuo.com/2023-11-07.html"/>
    <id>https://www.myhuangzhuo.com/2023-11-07.html</id>
    <published>2023-11-07T06:26:37.000Z</published>
    <updated>2023-11-07T08:12:35.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Chrome浏览器插件精选：开启高效上网的新纪元"><a href="#Chrome浏览器插件精选：开启高效上网的新纪元" class="headerlink" title="Chrome浏览器插件精选：开启高效上网的新纪元"></a>Chrome浏览器插件精选：开启高效上网的新纪元</h1><p>在这个信息爆炸的时代，有效地管理您的在线活动已经变得至关重要。作为全球最受欢迎的浏览器之一，Chrome的功能可以通过一系列强大的插件来扩展。今天，我将向您介绍几个精选的Chrome插件，这些插件将帮助您打造一个更快、更智能、更个性化的上网体验。</p><h2 id="Adblock-屏蔽网页和视频广告"><a href="#Adblock-屏蔽网页和视频广告" class="headerlink" title="Adblock - 屏蔽网页和视频广告"></a>Adblock - 屏蔽网页和视频广告</h2><p><img src="/uploads/chrome-ext/abs-ext.jpeg" alt="Adblock"><br>当您浏览网页时，<strong>Adblock</strong> 插件可以帮助您屏蔽一切网页和视频广告。这不仅能为您提供一个更加清洁、无打扰的阅读环境，而且还能减少数据的消耗，加快页面加载速度。想象一下，在没有广告打断的情况下观看您最爱的视频或阅读文章，Adblock让这一切变为可能。</p><h2 id="GoFullPage-自动翻页截取整个网页内容"><a href="#GoFullPage-自动翻页截取整个网页内容" class="headerlink" title="GoFullPage - 自动翻页截取整个网页内容"></a>GoFullPage - 自动翻页截取整个网页内容</h2><p><img src="/uploads/chrome-ext/gofullpage1.jpeg" alt="GoFullPage1"><br><img src="/uploads/chrome-ext/gofullpage2.jpeg" alt="GoFullPage2"></p><p>对于需要保存网页信息的用户来说，<strong>GoFullPage - Full Page Screen Capture</strong> 插件是一个必备工具。它可以自动翻页并截取整个网页内容，保存为单一的图片文件。无论是整个网页的长篇文章还是丰富的教程内容，这个插件都可以帮您一键截图保存，简化您的工作流程。</p><h2 id="Google-翻译-最好用的翻译神器"><a href="#Google-翻译-最好用的翻译神器" class="headerlink" title="Google 翻译 - 最好用的翻译神器"></a>Google 翻译 - 最好用的翻译神器</h2><p><img src="/uploads/chrome-ext/googletranslate.jpeg" alt="googletranslate"></p><p>在遇到外语网页时，有了<strong>Google 翻译</strong> 插件，您可以即刻将网页翻译成您熟悉的语言。它不仅提供了便捷的页面翻译功能，还允许您对选定的文本进行即时翻译，这无疑是探索全球内容的最佳工具。</p><h2 id="Proxy-SwitchyOmega-支持http和socks的自动代理工具"><a href="#Proxy-SwitchyOmega-支持http和socks的自动代理工具" class="headerlink" title="Proxy SwitchyOmega - 支持http和socks的自动代理工具"></a>Proxy SwitchyOmega - 支持http和socks的自动代理工具</h2><p><img src="/uploads/chrome-ext/SwitchyOmega.jpeg" alt="SwitchyOmega"></p><p><strong>Proxy SwitchyOmega</strong> 插件是一种灵活的网络代理工具，它支持HTTP和SOCKS代理。它让您可以根据需要快速切换代理，不仅方便访问地区限制内容，也为您的网络安全提供了一层额外的保护。</p><h2 id="沙拉查词-聚合词典划词翻译的网页查词神器"><a href="#沙拉查词-聚合词典划词翻译的网页查词神器" class="headerlink" title="沙拉查词 - 聚合词典划词翻译的网页查词神器"></a>沙拉查词 - 聚合词典划词翻译的网页查词神器</h2><p><img src="/uploads/chrome-ext/sala.jpeg" alt="沙拉查词"></p><p>当您在阅读外语网页或学习新单词时，<strong>沙拉查词-聚合词典划词翻译</strong>插件能够迅速提供单词释义和用例。这是一个非常实用的工具，特别是对于语言学习者和多语种阅读者，它提供了一个即刻的查词和学习体验。</p><h2 id="启用右键-解除网站复制拷贝的限制"><a href="#启用右键-解除网站复制拷贝的限制" class="headerlink" title="启用右键 - 解除网站复制拷贝的限制"></a>启用右键 - 解除网站复制拷贝的限制</h2><p><img src="/uploads/chrome-ext/allowcopy.jpeg" alt="启用右键"></p><p>遇到限制右键菜单或者限制复制拷贝的网站时，<strong>启用右键 - 允许复制和选择</strong> 插件能帮助您解锁这一限制。这对于研究人员和学生来说非常有用，甚至可以在如飞书文档这样的平台上，轻松地选择和复制需要的文本。</p><h2 id="篡改猴-改变网络，用户脚本自由定制"><a href="#篡改猴-改变网络，用户脚本自由定制" class="headerlink" title="篡改猴 - 改变网络，用户脚本自由定制"></a>篡改猴 - 改变网络，用户脚本自由定制</h2><p><img src="/uploads/chrome-ext/chuangai.jpeg" alt="篡改猴"></p><p><strong>篡改猴</strong> 插件允许用户通过脚本自定义网站的功能和外观，它甚至能支持解除包括爱奇艺、哔哩哔哩、腾讯视频、优酷等在内的视频网站VIP限制。这是一个为高级用户提供极大自由度的工具，通过脚本可以实现网站的个性化修改。</p><h2 id="Similarweb-网站流量排名和分析"><a href="#Similarweb-网站流量排名和分析" class="headerlink" title="Similarweb - 网站流量排名和分析"></a>Similarweb - 网站流量排名和分析</h2><p><img src="/uploads/chrome-ext/Similarweb.jpeg" alt="Similarweb"></p><p>对于市场研究人员和网站运营者，<strong>Similarweb - 流量排名和网站分析</strong> 插件提供了丰富的网站分析数据。它展示网站排名、网站流量、来源和地理位置等关键指标，帮助您更好地理解竞争格局和用户行为。</p><p>这些Chrome插件将极大地提高您的工作效率和网络体验。他们是您数字工具箱中的宝贵资产，无论您是在研究、学习、工作还是娱乐，都会发现他们的巨大价值。立即尝试这些插件，让您的浏览体验更上一层楼！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Chrome浏览器插件精选：开启高效上网的新纪元&quot;&gt;&lt;a href=&quot;#Chrome浏览器插件精选：开启高效上网的新纪元&quot; class=&quot;headerlink&quot; title=&quot;Chrome浏览器插件精选：开启高效上网的新纪元&quot;&gt;&lt;/a&gt;Chrome浏览器插件精选：
      
    
    </summary>
    
    
      <category term="chrome插件精选" scheme="https://www.myhuangzhuo.com/tags/chrome%E6%8F%92%E4%BB%B6%E7%B2%BE%E9%80%89/"/>
    
      <category term="网页解除复制限制" scheme="https://www.myhuangzhuo.com/tags/%E7%BD%91%E9%A1%B5%E8%A7%A3%E9%99%A4%E5%A4%8D%E5%88%B6%E9%99%90%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>leetcode第32题解题报告</title>
    <link href="https://www.myhuangzhuo.com/2020-08-19.html"/>
    <id>https://www.myhuangzhuo.com/2020-08-19.html</id>
    <published>2020-08-19T10:49:32.000Z</published>
    <updated>2023-11-07T05:12:38.860Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><ol start="32"><li>Longest Valid Parentheses</li></ol><p>Given a string containing just the characters ‘(‘ and ‘)’, find the length of the longest valid (well-formed) parentheses substring.</p><ul><li><p>Example 1:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">"(()"</span></span><br><span class="line">Output: <span class="number">2</span></span><br><span class="line">Explanation: The longest valid parentheses substring <span class="keyword">is</span> <span class="string">"()"</span></span><br></pre></td></tr></table></figure></li><li><p>Example 2:</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="string">")()())"</span></span><br><span class="line">Output: <span class="number">4</span></span><br><span class="line">Explanation: The longest valid parentheses substring <span class="keyword">is</span> <span class="string">"()()"</span></span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>符号对的匹配首先想到的是用栈来解决，左括号压栈，右括号匹配和出栈</li></ul><h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1:"></a>解法1:</h1><ul><li>用栈stack存储左括号的索引，start标记栈中最底部左括号索引，遇到右括号判断stack，若为空，则记录当前位置的下一个索引为start；若非空, 则出栈一个元素，再次判断栈是否为空，为空则 max(res, index-start+1), 否则 max(res, index-stack[-1]) ;<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestValidParentheses</span><span class="params">(self, s)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type s: str</span></span><br><span class="line"><span class="string">    :rtype: int</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    res, start, stack = <span class="number">0</span>, <span class="number">0</span>, []</span><br><span class="line">    <span class="keyword">for</span> index, c <span class="keyword">in</span> enumerate(s):</span><br><span class="line">        <span class="keyword">if</span> c == <span class="string">"("</span>:</span><br><span class="line">            stack.append(index)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> stack:</span><br><span class="line">                stack.pop()</span><br><span class="line">                res = max(res, index-stack[<span class="number">-1</span>]) <span class="keyword">if</span> stack <span class="keyword">else</span> max(res, index-start+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                start = index+<span class="number">1</span> <span class="comment"># next ( position</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></li></ul><h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2:"></a>解法2:</h1><ul><li>使用动态规划<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestValidParentheses</span><span class="params">(self, s)</span>:</span></span><br><span class="line">    length = len(s)</span><br><span class="line">    <span class="keyword">if</span> length == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    dp = [<span class="number">0</span>] * length</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,length):</span><br><span class="line">            <span class="comment">#当遇到右括号时，尝试向前匹配左括号</span></span><br><span class="line">        <span class="keyword">if</span> s[i] == <span class="string">')'</span>:</span><br><span class="line">            pre = i - dp[i<span class="number">-1</span>] <span class="number">-1</span>;</span><br><span class="line">            <span class="comment">#如果是左括号，则更新匹配长度</span></span><br><span class="line">            <span class="keyword">if</span> pre&gt;=<span class="number">0</span> <span class="keyword">and</span> s[pre] == <span class="string">'('</span>:</span><br><span class="line">                dp[i] = dp[i<span class="number">-1</span>] + <span class="number">2</span></span><br><span class="line">                <span class="comment">#处理独立的括号对的情形 类似()()、()(())</span></span><br><span class="line">                <span class="keyword">if</span> pre&gt;<span class="number">0</span>:</span><br><span class="line">                    dp[i] += dp[pre<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">return</span> max(dp);</span><br></pre></td></tr></table></figure></li></ul><p>or</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dp[i+1]表示前i+1个索引最长括号对</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestValidParentheses</span><span class="params">(self, s)</span>:</span></span><br><span class="line">    dp, stack = [<span class="number">0</span>]*(len(s) + <span class="number">1</span>), []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">        <span class="keyword">if</span> s[i] == <span class="string">'('</span>:</span><br><span class="line">            stack.append(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> stack:</span><br><span class="line">                p = stack.pop()</span><br><span class="line">                dp[i + <span class="number">1</span>] = dp[p] + i - p + <span class="number">1</span> <span class="comment"># </span></span><br><span class="line">    <span class="keyword">return</span> max(dp)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h3&gt;&lt;ol start=&quot;32&quot;&gt;
&lt;li&gt;Longest Valid Parentheses&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given a s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nginx开启gzip压缩</title>
    <link href="https://www.myhuangzhuo.com/2020-04-24.html"/>
    <id>https://www.myhuangzhuo.com/2020-04-24.html</id>
    <published>2020-04-24T10:49:32.000Z</published>
    <updated>2023-11-07T05:12:38.860Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求场景："><a href="#需求场景：" class="headerlink" title="需求场景："></a>需求场景：</h3><ul><li>最近在部署公司angularjs前端项目的时候，发现打包生成的一个main.js特别大达到了10M，感觉前端这边应该有很大的优化空间，试了好几种方式比如:加优化参数–aot, —-build-optimizer等都试过，生成的文件大小基本没有变化，于是就想从压缩静态文件入手；</li></ul><ol><li><p>angularjs项目中引入打包工具gzipper：</p></li><li><p>将打包命令写入package.json,参考如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build --prod &amp;&amp; gzipper --verbose --level 9 ./dist/my-app //level表示压缩级别：1-9(压缩率依次变高)</span><br></pre></td></tr></table></figure></li><li><p>nginx配置支持gzip压缩:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在nginx配置http/server/location中加入如下配置:</span></span><br><span class="line">    gzip  on; //开启gzip</span><br><span class="line">    gzip_proxied no-cache no-store private expired auth; //代理的情况</span><br><span class="line">    gzip_min_length 1k; //gzip最小压缩大小</span><br><span class="line">    gzip_buffers 4 16k; </span><br><span class="line">    gzip_comp_level 5; //gzip压缩级别(1-9)</span><br><span class="line">    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript image/jpeg image/gif image/png; //支持压缩的文件类型</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_disable "MSIE [1-6]\."; //ie 1-6下禁用压缩</span><br><span class="line">    gzip_static on; //开启本地gzip文件的压缩，要求事先生成gzip文件</span><br><span class="line">    gzip_http_version   1.0; //gzip压缩版本，在多级代理的情况下默认可能会有坑</span><br></pre></td></tr></table></figure></li><li><p>打包配置上线验证：<br>响应header中包含这个说明压缩成功：Content-Encoding:gzip<br>下图是对比<br><img src="/uploads/nginx-gzip/gzip-vs.png" alt><br><a href="https://medium.com/@subodhkumarjc/angular-build-optimization-part-2-compression-b866dd0593c3" target="_blank" rel="noopener">Angular Build貌似还可以用其他的压缩方式</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;需求场景：&quot;&gt;&lt;a href=&quot;#需求场景：&quot; class=&quot;headerlink&quot; title=&quot;需求场景：&quot;&gt;&lt;/a&gt;需求场景：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;最近在部署公司angularjs前端项目的时候，发现打包生成的一个main.js特别大达到了10M，感觉
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>求最大公约数和最小公倍数</title>
    <link href="https://www.myhuangzhuo.com/2020-03-25.html"/>
    <id>https://www.myhuangzhuo.com/2020-03-25.html</id>
    <published>2020-03-25T10:49:32.000Z</published>
    <updated>2023-11-07T05:12:38.859Z</updated>
    
    <content type="html"><![CDATA[<h3 id="辗转相除法的推导："><a href="#辗转相除法的推导：" class="headerlink" title="辗转相除法的推导："></a>辗转相除法的推导：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">求x和y的最大公约数:</span></span><br><span class="line"><span class="string">假设 k = x / y , b = x % y, 则：</span></span><br><span class="line"><span class="string">1. x = k * y + b;</span></span><br><span class="line"><span class="string">假设 g为x和y的最大公约数: 则：</span></span><br><span class="line"><span class="string">2. x = g * c1 ; </span></span><br><span class="line"><span class="string">3. y = g * c2 ; (c1, c2为某个常数)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">将1带入2，可得：</span></span><br><span class="line"><span class="string">4. k * y + b = g * c1;</span></span><br><span class="line"><span class="string">将3带入4，可得：</span></span><br><span class="line"><span class="string">k * (g * c2) + b = g * c1 ==&gt; b = g * (c1 - k*c2)</span></span><br><span class="line"><span class="string">从而可得: b = g * c3;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">于是求x和y最大公约数函数 f(x, y) = f(y, b),</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x <span class="keyword">if</span> y==<span class="number">0</span> <span class="keyword">else</span> gcd(y, x%y)</span><br></pre></td></tr></table></figure><h3 id="辗转相减法："><a href="#辗转相减法：" class="headerlink" title="辗转相减法："></a>辗转相减法：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">求x和y的最大公约数:</span></span><br><span class="line"><span class="string">假设 g为x和y的最大公约数: 则：</span></span><br><span class="line"><span class="string">1. x = g * c1 ; </span></span><br><span class="line"><span class="string">2. y = g * c2 ; (c1, c2为某个常数)</span></span><br><span class="line"><span class="string">1减去2可得：</span></span><br><span class="line"><span class="string">x-y = g * (c1-c2)</span></span><br><span class="line"><span class="string">则可以推导出 y和x-y的最大公约数也是g ：</span></span><br><span class="line"><span class="string">于是：f(x, y) = f(y, x-y)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd_sub</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">while</span>(y):</span><br><span class="line">        <span class="keyword">if</span> y &gt; x:</span><br><span class="line">            x, y = y, x</span><br><span class="line">        x, y = y, x-y</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;辗转相除法的推导：&quot;&gt;&lt;a href=&quot;#辗转相除法的推导：&quot; class=&quot;headerlink&quot; title=&quot;辗转相除法的推导：&quot;&gt;&lt;/a&gt;辗转相除法的推导：&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python3高阶函数库functools</title>
    <link href="https://www.myhuangzhuo.com/2019-06-12.html"/>
    <id>https://www.myhuangzhuo.com/2019-06-12.html</id>
    <published>2019-06-12T10:49:32.000Z</published>
    <updated>2023-11-07T05:12:38.858Z</updated>
    
    <content type="html"><![CDATA[<p>###python2.7中functools库wrapper,reduce,partial,total_ordering,cmp_to_key</p><ul><li>cmp_to_key见名知意把cmp比较函数转换成key比较函数，python3中不支持cmp;</li><li>total_ordering 这个装饰器是在python2.7的时候加上的，它是针对某个类如果定义了<strong>lt</strong>、le、gt、<strong>ge</strong>这些方法中的至少一个，使用该装饰器，则会自动的把其他几个比较函数也实现在该类中;</li><li>reduce 和之前的reduce函数意义相同;</li><li>partial局部部分的意思，可以固定函数的部分参数变成定制的函数，看到有些书上翻译成偏函数感觉非常晦涩;</li><li>wrapper 装饰器函数，把装饰器函数伪装成被装饰函数，实际调用的是update_wrapper，源码设置了<strong>name</strong>,<strong>doc</strong>,<strong>module</strong>,<strong>dict</strong>属性给装饰器函数；</li></ul><h3 id="python3-6-5中functools库新增了lru-cache和singledispatch"><a href="#python3-6-5中functools库新增了lru-cache和singledispatch" class="headerlink" title="python3.6.5中functools库新增了lru_cache和singledispatch"></a>python3.6.5中functools库新增了lru_cache和singledispatch</h3><ul><li>lru_cache缓存计算结果</li><li>singledispatch 有点类似c++中的泛型和多态<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key, total_ordering, reduce, partial, wraps, lru_cache, singledispatch</span><br><span class="line"></span><br><span class="line">a = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_cmp</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; y:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; y:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">print(sorted(a, key=cmp_to_key(my_cmp)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@total_ordering #如果去掉 &gt;= 不能使用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, first, last)</span>:</span></span><br><span class="line">        self.firstname = first</span><br><span class="line">        self.lastname = last</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ((self.lastname.lower(), self.firstname.lower()) ==</span><br><span class="line">                (other.lastname.lower(), other.firstname.lower()))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> ((self.lastname.lower(), self.firstname.lower()) &lt;</span><br><span class="line">                (other.lastname.lower(), other.firstname.lower()))</span><br><span class="line"></span><br><span class="line">c = Student(<span class="string">'abc'</span>, <span class="string">'kevin'</span>)</span><br><span class="line">b = Student(<span class="string">'zuang'</span>, <span class="string">'kevin'</span>)</span><br><span class="line">print(b &gt;= c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">three_mul = partial(mul, <span class="number">3</span>)</span><br><span class="line">print(three_mul(<span class="number">9</span>))</span><br><span class="line">print(reduce(mul, a))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clock</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clocked</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        t0 = time.perf_counter()</span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        t1 = time.perf_counter()</span><br><span class="line">        print(<span class="string">'func:&#123;&#125; args:&#123;&#125; cost:&#123;&#125;'</span>.format(func, args, t1 - t0))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">return</span> clocked</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@lru_cache()</span></span><br><span class="line"><span class="meta">@clock</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t0 = time.perf_counter()</span><br><span class="line">print(fib(<span class="number">30</span>))</span><br><span class="line">t1 = time.perf_counter()</span><br><span class="line">print(<span class="string">'total:&#123;&#125;'</span>.format(t1 - t0))</span><br><span class="line">print(fib.__name__)</span><br><span class="line">print(fib.cache_info())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Point = namedtuple(<span class="string">'Point'</span>, [<span class="string">'x'</span>, <span class="string">'y'</span>])</span><br><span class="line">p = Point(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@singledispatch</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">typecheck</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@typecheck.register(int)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(text)</span>:</span></span><br><span class="line">    print(type(text))</span><br><span class="line">    print(<span class="string">'---int---'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@typecheck.register(str)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(text)</span>:</span></span><br><span class="line">    print(type(text))</span><br><span class="line">    print(<span class="string">'---str---'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@typecheck.register(float)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_</span><span class="params">(text)</span>:</span></span><br><span class="line">    print(type(text))</span><br><span class="line">    print(<span class="string">'---float---'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typecheck(<span class="string">'ring'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###python2.7中functools库wrapper,reduce,partial,total_ordering,cmp_to_key&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cmp_to_key见名知意把cmp比较函数转换成key比较函数，python3中不支持cmp;&lt;/li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Socks5代理转Http协议</title>
    <link href="https://www.myhuangzhuo.com/2019-04-12.html"/>
    <id>https://www.myhuangzhuo.com/2019-04-12.html</id>
    <published>2019-04-12T10:49:32.000Z</published>
    <updated>2023-11-07T05:12:38.858Z</updated>
    
    <content type="html"><![CDATA[<p>###privoxy<br>privoxy在http代理服务方面之前跟tor进行合作，老牌值得信赖（tor后来转而跟polipo合作。不过实际使用过程，我发现还是privoxy的配置比较舒服。）。<br>相比proxychains，privoxy相当于直接在本地监听指定的端口，启动一个HTTP的代理服务，任何转发到这个端口的服务相当于使用了这一HTTP代理服务。</p><p>##安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install privoxy</span><br></pre></td></tr></table></figure><p>##配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/Cellar/privoxy/3.0.26/sbin/config</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在文档的最后添加如下语句，将接收到的数据转发到对应的ip和端口。</span><br><span class="line"><span class="meta">#</span> 此处，设定的监听端口为8118，数据转发到本地`127.0.0.1`；</span><br><span class="line">listen-address 0.0.0.0:8118</span><br><span class="line"></span><br><span class="line">forward-socks5 / 127.0.0.1:1080 .</span><br></pre></td></tr></table></figure><p>##使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> mac下必须先cd /usr/local/Cellar/privoxy/3.0.26/sbin</span><br><span class="line">/usr/local/Cellar/privoxy/3.0.26/sbin/privoxy</span><br></pre></td></tr></table></figure><p>##终端配置代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="meta">#</span> edit</span><br><span class="line"><span class="meta">#</span> proxy list</span><br><span class="line">alias proxy='export all_proxy=http://127.0.0.1:8118'</span><br><span class="line">alias unproxy='unset all_proxy'</span><br><span class="line"><span class="meta">#</span> end edit</span><br><span class="line"><span class="meta">#</span> 然后shell下运行 proxy和unproxy切换终端是否代理：</span><br><span class="line">proxy</span><br></pre></td></tr></table></figure><p> 后面终端就可以使用http代理了</p><ul><li>另外今天发现了两个代理工具：brook和V2Ray,据说ss会被监听到，有空研究一下这两个工具</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###privoxy&lt;br&gt;privoxy在http代理服务方面之前跟tor进行合作，老牌值得信赖（tor后来转而跟polipo合作。不过实际使用过程，我发现还是privoxy的配置比较舒服。）。&lt;br&gt;相比proxychains，privoxy相当于直接在本地监听指定的端
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kong中配置支持socketio</title>
    <link href="https://www.myhuangzhuo.com/2019-04-08.html"/>
    <id>https://www.myhuangzhuo.com/2019-04-08.html</id>
    <published>2019-04-08T10:49:32.000Z</published>
    <updated>2023-11-07T05:12:38.858Z</updated>
    
    <content type="html"><![CDATA[<p>###websocket<br>它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。</p><p>###python websocket server实现</p><ol><li>socketio: flask_socketio <blockquote><ol><li>跨浏览器、跨平台，多种连接方式自动切换</li><li>功能完善，心跳检测，断线自动重连</li><li>使用方便，支持room和namespace;</li><li>server和client必须配套使用，不能直接用原生WebSocket</li></ol></blockquote></li><li>tornado_websocket<blockquote><ol><li>回掉方式，在异步化之后，并发处理能力应该不错，</li><li>因为是原生支持websocket而不像flask需要寻找第三方插件，所以可能更值得信赖</li></ol></blockquote></li><li>dwebsocket<blockquote><p>没有用过， github上star 100多，比较少</p></blockquote></li></ol><h3 id="flask-socketio实现"><a href="#flask-socketio实现" class="headerlink" title="flask_socketio实现"></a>flask_socketio实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">from</span> flask_socketio <span class="keyword">import</span> SocketIO, rooms</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">socketio = SocketIO(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ack</span><span class="params">(data)</span>:</span></span><br><span class="line">    print(<span class="string">'push msg success:&#123;&#125;'</span>.format(data)) <span class="comment">#增加推送成功回调</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/', methods=['POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">active_ws</span><span class="params">()</span>:</span></span><br><span class="line">    r = request.form</span><br><span class="line">    print(<span class="string">'push msg to:&#123;&#125;'</span>.format(r.to_dict()))</span><br><span class="line">    socketio.emit(<span class="string">'server_push'</span>, r.to_dict(), room=r.get(<span class="string">'socket_id'</span>),</span><br><span class="line">                  namespace=<span class="string">'/test'</span>, callback=ack)</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">'status'</span>: <span class="string">'ok'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on('connect', namespace='/test')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_connect</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'client connected websocket: &#123;&#125;'</span>.format(*rooms()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on('disconnect', namespace='/test')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_disconnect</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'close websocket: &#123;&#125;'</span>.format(*rooms()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    socketio.run(app=app, port=<span class="number">9000</span>)</span><br></pre></td></tr></table></figure><h3 id="kong中配置支持socketio"><a href="#kong中配置支持socketio" class="headerlink" title="kong中配置支持socketio"></a>kong中配置支持socketio</h3><blockquote><p>目前kong版本 1.3, 使用kong-dashboard v2;<br>增加api转发 注意upstream_url填ip, 否则可能报502;<br>增加cors插件，origins=* , Credentials=true;</p></blockquote><h3 id="socketio客户端连接"><a href="#socketio客户端连接" class="headerlink" title="socketio客户端连接"></a>socketio客户端连接</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"//cdnjs.cloudflare.com/ajax/libs/socket.io/1.3.6/socket.io.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var socket = io.connect('ws:/</span><span class="regexp">/localhost:9000/</span>test<span class="string">',</span></span><br><span class="line"><span class="string">           &#123;</span></span><br><span class="line"><span class="string">               path: '</span>/path/socket.io<span class="string">',</span></span><br><span class="line"><span class="string">               transport : ['</span>websocket<span class="string">']</span></span><br><span class="line"><span class="string">           &#125;</span></span><br><span class="line"><span class="string">   );</span></span><br><span class="line"><span class="string">   socket.on('</span>connect<span class="string">', function () &#123;</span></span><br><span class="line"><span class="string">       console.log(socket.id);</span></span><br><span class="line"><span class="string">   &#125;, namespace='</span>/wechat<span class="string">');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       socket.on('</span>server_push<span class="string">', function (data, ack) &#123;</span></span><br><span class="line"><span class="string">           console.log(socket.id);</span></span><br><span class="line"><span class="string">           console.log(data);</span></span><br><span class="line"><span class="string">           ack(&#123;'</span>socket_id<span class="string">': socket.id, '</span>status<span class="string">': '</span>ok<span class="string">'&#125;);</span></span><br><span class="line"><span class="string">       &#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###websocket&lt;br&gt;它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种。&lt;/p&gt;
&lt;p&gt;###python websocket server实现&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;socke
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>mysql中group by和order by解析</title>
    <link href="https://www.myhuangzhuo.com/2018-12-11.html"/>
    <id>https://www.myhuangzhuo.com/2018-12-11.html</id>
    <published>2018-12-11T01:19:00.000Z</published>
    <updated>2023-11-07T05:12:38.856Z</updated>
    
    <content type="html"><![CDATA[<p>###<br>本文就和大家一起深入研究下mysql中group by与order by.下面是我模拟我的内容表<br><img src="/uploads/mysql-groupby/mysql-1.gif" alt="内容表"><br>我现在需要取出每个分类中最新的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from test group by category_id order by `date`</span><br></pre></td></tr></table></figure><p>结果如下<br><img src="/uploads/mysql-groupby/mysql-2.gif" alt></p><p>明显。这不是我想要的数据，原因是msyql已经的执行顺序是</p><p>引用</p><p>写的顺序：select … from… where…. group by… having… order by..<br>执行顺序：from… where…group by… having…. select … order by…</p><p>所以在order by拿到的结果里已经是分组的完的最后结果。<br>由from到where的结果如下的内容。<br><img src="/uploads/mysql-groupby/mysql-3.gif" alt> </p><p>到group by时就得到了根据category_id分出来的多个小组<br><img src="/uploads/mysql-groupby/mysql-4.gif" alt><br><img src="/uploads/mysql-groupby/mysql-5.gif" alt></p><p>到了select的时候，只从上面的每个组里取第一条信息结果会如下<br><img src="/uploads/mysql-groupby/mysql-6.gif" alt></p><p>即使order by也只是从上面的结果里进行排序。并不是每个分类的最新信息。<br>回到我的目的上 －－分类中最新的信息<br>根据上面的分析，group by到select时只取到分组里的第一条信息。有两个解决方法</p><p>1，where+group by（对小组进行排序）<br>2，从form返回的数据下手脚（即用子查询）<br>由where+group by的解决方法<br>对group by里的小组进行排序的函数我只查到group_concat()可以进行排序，但group_concat的作用是将小组里的字段里的值进行串联起来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select group_concat(id order by `date` desc) from `test` group by category_id</span><br></pre></td></tr></table></figure><p><img src="/uploads/mysql-groupby/mysql-7.gif" alt> </p><p>再改进一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from `test` where id in(select SUBSTRING_INDEX(group_concat(id order by `date` desc),',',1) from `test` group by category_id ) order by `date` desc</span><br></pre></td></tr></table></figure><p><img src="/uploads/mysql-groupby/mysql-8.gif" alt> </p><p>子查询解决方案</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (select * from `test` order by `date` desc) `temp`  group by category_id order by `date` desc</span><br></pre></td></tr></table></figure><p><img src="/uploads/mysql-groupby/mysql-9.gif" alt></p><p>自己例子</p><p>复制代码 代码如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM (SELECT * FROM `ecm_copy_goods_change` ORDER BY `cid` DESC) `ecm_copy_goods_change` GROUP BY goods_id ORDER BY `cid` DESC</span><br></pre></td></tr></table></figure><ul><li>mysql下试了方法1，不成功，然后用的方法2；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###&lt;br&gt;本文就和大家一起深入研究下mysql中group by与order by.下面是我模拟我的内容表&lt;br&gt;&lt;img src=&quot;/uploads/mysql-groupby/mysql-1.gif&quot; alt=&quot;内容表&quot;&gt;&lt;br&gt;我现在需要取出每个分类中最新的内容&lt;
      
    
    </summary>
    
      <category term="mysql" scheme="https://www.myhuangzhuo.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="https://www.myhuangzhuo.com/tags/mysql/"/>
    
      <category term="group by" scheme="https://www.myhuangzhuo.com/tags/group-by/"/>
    
      <category term="order by" scheme="https://www.myhuangzhuo.com/tags/order-by/"/>
    
  </entry>
  
  <entry>
    <title>python调用grpc服务设置headers</title>
    <link href="https://www.myhuangzhuo.com/2018-12-03.html"/>
    <id>https://www.myhuangzhuo.com/2018-12-03.html</id>
    <published>2018-12-03T01:19:00.000Z</published>
    <updated>2023-11-07T05:12:38.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python安装grpc相关库"><a href="#python安装grpc相关库" class="headerlink" title="python安装grpc相关库"></a>python安装grpc相关库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install grpc grpcio grpcio-tools</span><br><span class="line">pip install protobuf #注意版本，开发过程中遇到过不同版本的protobuf不兼容的情况</span><br></pre></td></tr></table></figure><h3 id="python中引入第三方proto文件"><a href="#python中引入第三方proto文件" class="headerlink" title="python中引入第三方proto文件"></a>python中引入第三方proto文件</h3><p>下载第三方proto文件到你本地proto目录，最好把路径都改到一级目录，省去很多不必要的麻烦<br>生成<em>.pb2.py和</em>.pb2_grpc.py文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. http.proto</span><br></pre></td></tr></table></figure><ul><li><p>如果使用目标pb2文件过程中依赖第三方的pb2文件，可以再次执行上面 python -m 生成第三方的pb2文件。</p><h3 id="python设置grpc请求头headers："><a href="#python设置grpc请求头headers：" class="headerlink" title="python设置grpc请求头headers："></a>python设置grpc请求头headers：</h3><p>查阅了网上所有的资料都没有看到定制headers的方法，最终在grpc python example代码中发现了一种使用拦截器的方法，有点麻烦，不过能解决问题，如果你发现更方便的方法，麻烦告知我一下，万分感谢，拦截器方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> grpc</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_GenericClientInterceptor</span><span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">        grpc.UnaryUnaryClientInterceptor, grpc.UnaryStreamClientInterceptor,</span></span></span><br><span class="line"><span class="class"><span class="params">        grpc.StreamUnaryClientInterceptor, grpc.StreamStreamClientInterceptor)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, interceptor_function)</span>:</span></span><br><span class="line">        self._fn = interceptor_function</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intercept_unary_unary</span><span class="params">(self, continuation, client_call_details, request)</span>:</span></span><br><span class="line">        new_details, new_request_iterator, postprocess = self._fn(</span><br><span class="line">            client_call_details, iter((request,)), <span class="literal">False</span>, <span class="literal">False</span>)</span><br><span class="line">        response = continuation(new_details, next(new_request_iterator))</span><br><span class="line">        <span class="keyword">return</span> postprocess(response) <span class="keyword">if</span> postprocess <span class="keyword">else</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intercept_unary_stream</span><span class="params">(self, continuation, client_call_details,</span></span></span><br><span class="line"><span class="function"><span class="params">                               request)</span>:</span></span><br><span class="line">        new_details, new_request_iterator, postprocess = self._fn(</span><br><span class="line">            client_call_details, iter((request,)), <span class="literal">False</span>, <span class="literal">True</span>)</span><br><span class="line">        response_it = continuation(new_details, next(new_request_iterator))</span><br><span class="line">        <span class="keyword">return</span> postprocess(response_it) <span class="keyword">if</span> postprocess <span class="keyword">else</span> response_it</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intercept_stream_unary</span><span class="params">(self, continuation, client_call_details,</span></span></span><br><span class="line"><span class="function"><span class="params">                               request_iterator)</span>:</span></span><br><span class="line">        new_details, new_request_iterator, postprocess = self._fn(</span><br><span class="line">            client_call_details, request_iterator, <span class="literal">True</span>, <span class="literal">False</span>)</span><br><span class="line">        response = continuation(new_details, new_request_iterator)</span><br><span class="line">        <span class="keyword">return</span> postprocess(response) <span class="keyword">if</span> postprocess <span class="keyword">else</span> response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intercept_stream_stream</span><span class="params">(self, continuation, client_call_details,</span></span></span><br><span class="line"><span class="function"><span class="params">                                request_iterator)</span>:</span></span><br><span class="line">        new_details, new_request_iterator, postprocess = self._fn(</span><br><span class="line">            client_call_details, request_iterator, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">        response_it = continuation(new_details, new_request_iterator)</span><br><span class="line">        <span class="keyword">return</span> postprocess(response_it) <span class="keyword">if</span> postprocess <span class="keyword">else</span> response_it</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(intercept_call)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> _GenericClientInterceptor(intercept_call)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ClientCallDetails</span><span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">        collections.namedtuple<span class="params">(</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="params">            <span class="string">'_ClientCallDetails'</span>,</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="params">            <span class="params">(<span class="string">'method'</span>, <span class="string">'timeout'</span>, <span class="string">'metadata'</span>, <span class="string">'credentials'</span>)</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">        grpc.ClientCallDetails)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">header_adder_interceptor</span><span class="params">(header, value)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intercept_call</span><span class="params">(client_call_details, request_iterator, request_streaming,</span></span></span><br><span class="line"><span class="function"><span class="params">                       response_streaming)</span>:</span></span><br><span class="line">        metadata = []</span><br><span class="line">        <span class="keyword">if</span> client_call_details.metadata <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            metadata = list(client_call_details.metadata)</span><br><span class="line">        metadata.append((</span><br><span class="line">            header,</span><br><span class="line">            value,</span><br><span class="line">        ))</span><br><span class="line">        client_call_details = _ClientCallDetails(</span><br><span class="line">            client_call_details.method, client_call_details.timeout, metadata,</span><br><span class="line">            client_call_details.credentials)</span><br><span class="line">        <span class="keyword">return</span> client_call_details, request_iterator, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> create(intercept_call)</span><br><span class="line"></span><br><span class="line">server_address=<span class="string">'www.example.com:50000'</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'server.pem'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    creds = grpc.ssl_channel_credentials(f.read())</span><br><span class="line">token = <span class="string">'123'</span></span><br><span class="line">header_adder_interceptor = header_adder_interceptor(<span class="string">'authorization'</span>, <span class="string">'token &#123;&#125;'</span>.format(token))</span><br><span class="line">channel = grpc.secure_channel(server_address, creds) <span class="comment">#使用https证书的方法，需要可以参考一下，不需要证书可以使用grpc.insecure_channel()</span></span><br><span class="line">intercept_channel = grpc.intercept_channel(channel, header_adder_interceptor)</span><br><span class="line">stub = resume_pb2_grpc.ResumeStub(intercept_channel)</span><br></pre></td></tr></table></figure></li><li><p>具体使用过程中可以把header_adder_interceptor抽象出来变成个服务</p></li><li><p>还有个请求地址的问题，记住https证书只针对域名，不会针对ip，所以地址必须写成域名，本地测试可以把域名到ip的映射写到hosts文件中</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python安装grpc相关库&quot;&gt;&lt;a href=&quot;#python安装grpc相关库&quot; class=&quot;headerlink&quot; title=&quot;python安装grpc相关库&quot;&gt;&lt;/a&gt;python安装grpc相关库&lt;/h3&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
      <category term="grpc" scheme="https://www.myhuangzhuo.com/categories/grpc/"/>
    
    
      <category term="python" scheme="https://www.myhuangzhuo.com/tags/python/"/>
    
      <category term="grpc" scheme="https://www.myhuangzhuo.com/tags/grpc/"/>
    
  </entry>
  
  <entry>
    <title>慕课网免费视频课程</title>
    <link href="https://www.myhuangzhuo.com/2018-10-30.html"/>
    <id>https://www.myhuangzhuo.com/2018-10-30.html</id>
    <published>2018-10-30T10:19:00.000Z</published>
    <updated>2023-11-07T05:12:38.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="免费学习资源："><a href="#免费学习资源：" class="headerlink" title="免费学习资源："></a>免费学习资源：</h3><p>1、Java工程师 <a href="http://www.imooc.com/course/programdetail/pid/31" target="_blank" rel="noopener">http://www.imooc.com/course/programdetail/pid/31</a><br>2、Web前端工程师 <a href="http://www.imooc.com/course/programdetail/pid/32" target="_blank" rel="noopener">http://www.imooc.com/course/programdetail/pid/32</a><br>3、PHP工程师 <a href="http://www.imooc.com/course/programdetail/pid/34" target="_blank" rel="noopener">http://www.imooc.com/course/programdetail/pid/34</a><br>4、Android工程师 <a href="http://www.imooc.com/course/programdetail/pid/33" target="_blank" rel="noopener">http://www.imooc.com/course/programdetail/pid/33</a><br>5、Linux运维工程师 <a href="http://www.imooc.com/course/programdetail/pid/45" target="_blank" rel="noopener">http://www.imooc.com/course/programdetail/pid/45</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;免费学习资源：&quot;&gt;&lt;a href=&quot;#免费学习资源：&quot; class=&quot;headerlink&quot; title=&quot;免费学习资源：&quot;&gt;&lt;/a&gt;免费学习资源：&lt;/h3&gt;&lt;p&gt;1、Java工程师 &lt;a href=&quot;http://www.imooc.com/course/pro
      
    
    </summary>
    
      <category term="学习" scheme="https://www.myhuangzhuo.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="linux" scheme="https://www.myhuangzhuo.com/tags/linux/"/>
    
      <category term="java" scheme="https://www.myhuangzhuo.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>GraphQL入门指导</title>
    <link href="https://www.myhuangzhuo.com/2018-10-19.html"/>
    <id>https://www.myhuangzhuo.com/2018-10-19.html</id>
    <published>2018-10-19T10:19:00.000Z</published>
    <updated>2023-11-07T05:12:38.856Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是GRAPHQL"><a href="#什么是GRAPHQL" class="headerlink" title="什么是GRAPHQL"></a>什么是GRAPHQL</h3><p>GraphQL是API的查询语言和运行时，用于使用现有数据完成这些查询。 GraphQL提供了API中数据的完整且易于理解的描述，使客户能够准确地询问他们需要什么，仅此而已，使API随着时间的推移更容易发展，并支持强大的开发人员工具。</p><h3 id="GraphQL-与-RESTful-有什么区别？"><a href="#GraphQL-与-RESTful-有什么区别？" class="headerlink" title="GraphQL 与 RESTful 有什么区别？"></a>GraphQL 与 RESTful 有什么区别？</h3><ul><li>首先放上一张来自于 graphql.org 的图片。REST 与 GraphQL 都是服务端所承载的系统对外的服务接口，因此两者肯定是可以共存的，甚至可以共用一套 Authorization 等业务逻辑。<br><img src="/uploads/graphql/graphql-and-restful.png" alt><br>RESTful的一些不足:</li><li>扩展性，单个RESTful接口返回数据越来越臃肿<br>比如获取用户信息/users/:id，最初可能只有id、昵称，但随着需求的变化，用户所包含的字段可能会越来越多，年龄、性别、头像、经验、等级，等等等等。</li></ul><p>而具体到某个前端页面，可能只需要其中一小部分数据，这样就会增加网络传输量，前端获取了大量不必要的数据。</p><ul><li>某个前端展现，实际需要调用多个独立的RESTful API才能获取到足够的数据<br>比如一个文章详情页，最初可能只需要文章内容，那么前端就调用/articles/:aid获取到文章内容来展现就行了</li></ul><p>但随着需求的演进，产品可能会希望加上作者信息（昵称、头像等），这时前端又需要在获取文章详情后，根据其中的作者id字段继续获取作者相关的信息，/user/:uid</p><p>然后，需求又变化了，产品希望在加上这篇文章的评论，这时前端需要继续调用/comment/:aid来拉取评论列表</p><p>对于Web前端而言，由于ajax技术的存在，这种的请求数据方式，也就开发上稍微麻烦些，并不会造成太大的问题；但对于App来说，渲染的方式不同，必须要拉取的全部的数据之后，才能绘制界面，就会导致这个界面必须要等到所有3个RESTful接口的返回数据都拿到，才能进行绘制。</p><p>GraphQL的一些优点</p><ul><li>所见即所得<br>查询的返回结果就是输入的查询结构的精确映射<br>查询：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  books(id: <span class="number">3</span>) &#123;</span><br><span class="line">    id</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>返回：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"user"</span>: &#123;</span><br><span class="line">      <span class="string">"uid"</span>: <span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"xxx"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>减少网络请求次数<br>如果设计的数据结构是从属的（例如，上文中书的作者信息），直接就能在查询语句中指定:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  books(id: <span class="number">3</span>) &#123;</span><br><span class="line">    id,</span><br><span class="line">    name,</span><br><span class="line">    author &#123;</span><br><span class="line">      id,</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>即使数据结构是独立的，也可以在查询语句中指定上下文，只需要一次网络请求，就能获得资源和子资源的数据（例如，上文中书和作者信息）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  books(id: <span class="number">3</span>) &#123;</span><br><span class="line">    id,</span><br><span class="line">    name,</span><br><span class="line">    author &#123;</span><br><span class="line">      id,</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  allAuthors &#123;</span><br><span class="line">    id,</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>代码即文档<br>GraphQL会把schema定义和相关的注释生成可视化的文档，从而使得代码的变更，直接就反映到最新的文档上，避免RESTful中手工维护可能会造成代码、文档不一致的问题。</p></li><li><p>参数类型强校验<br>RESTful方案本身没有对参数的类型做规定，往往都需要自行实现参数的校验机制，以确保安全。</p></li></ul><p>但GraphQL提供了强类型的schema机制，从而天然确保了参数类型的合法性。</p><h3 id="GraphQL-能做到修改数据吗？"><a href="#GraphQL-能做到修改数据吗？" class="headerlink" title="GraphQL 能做到修改数据吗？"></a>GraphQL 能做到修改数据吗？</h3><p>看了上面的 query 的例子，你肯定很好奇，graphql 这种看上去好像只为查询而存在的语言，是不是有办法做到修改数据呢？</p><p>答案是：能。</p><p>仅仅为了使得 GraphQL 这个 data platform 变得更加完整，GraphQL 标准中加入了一种操作符，名为 mutation。因为我觉得这种设计确实比较一般，此处就不举例了，详情见：<a href="http://graphql.org/learn/queries/#mutations" target="_blank" rel="noopener">http://graphql.org/learn/queries/#mutations</a></p><h3 id="令人期待的-subscription"><a href="#令人期待的-subscription" class="headerlink" title="令人期待的 subscription"></a>令人期待的 subscription</h3><p>如何在浏览器中接受服务端的推送信息是个老生常谈的问题。从最初的轮询，到后来的 WebSocket。如今 GraphQL 也计划引入除了 query, mutation 以外的第三种操作符 subscription，以便于直接接受服务器推送数据。在 2015 年底 GraphQL 官方发布了一篇博文：Subscriptions in GraphQL and Relay 来介绍 subscription 在他们的 iOS 和 Android App 中的应用。可惜的是相关的代码仍未开源，目前开源社区能找到的解决方案目前只有 Apollo 社区为 Node.js 写的 graphql-subscriptions。</p><h3 id="GraphQL-有什么缺点？"><a href="#GraphQL-有什么缺点？" class="headerlink" title="GraphQL 有什么缺点？"></a>GraphQL 有什么缺点？</h3><ul><li>N + 1 问题<br>以下解决方案仅针对关系型数据库，如果你的项目中使用的是 NoSQL，可能解决方案有较大差别。</li></ul><p>针对一对一的关系（比如我上面举例中提到的这个 User 与 UserScore 的关系），在从数据库里抓取数据时，就将所需数据 join 到一张表里。别等着 ORM 框架替你懒加载那些你需要的数据。<br>针对多对一或者多对多的关系，你就要用到一个叫做 DataLoader 的工具库了。其中，Facebook 为 Node.js 社区提供了 DataLoader 的实现。DataLoader 的主要功能是 batching &amp; caching，可以将多次数据库查询的请求合并为一个，同时已经加载过的数据可以直接从 DataLoader 的缓存空间中获取到。这个话题要是展开说也得写一篇新的文章了，此处不多赘述。</p><h3 id="有什么可以快乐地调试-GraphQL-接口的方法？"><a href="#有什么可以快乐地调试-GraphQL-接口的方法？" class="headerlink" title="有什么可以快乐地调试 GraphQL 接口的方法？"></a>有什么可以快乐地调试 GraphQL 接口的方法？</h3><p>GraphiQL / live demo</p><p>使用 GraphiQL 可以很容易地让人感受到“代码即文档”的快乐。</p><p>扩展阅读: <a href="https://graphql.org/" target="_blank" rel="noopener">https://graphql.org/</a>  <a href="https://www.howtographql.com/graphql-python/0-introduction/" target="_blank" rel="noopener">https://www.howtographql.com/graphql-python/0-introduction/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是GRAPHQL&quot;&gt;&lt;a href=&quot;#什么是GRAPHQL&quot; class=&quot;headerlink&quot; title=&quot;什么是GRAPHQL&quot;&gt;&lt;/a&gt;什么是GRAPHQL&lt;/h3&gt;&lt;p&gt;GraphQL是API的查询语言和运行时，用于使用现有数据完成这些查询。 G
      
    
    </summary>
    
      <category term="graphql" scheme="https://www.myhuangzhuo.com/categories/graphql/"/>
    
    
      <category term="api" scheme="https://www.myhuangzhuo.com/tags/api/"/>
    
      <category term="graphql" scheme="https://www.myhuangzhuo.com/tags/graphql/"/>
    
  </entry>
  
  <entry>
    <title>Tesseract-training-recognize-lib</title>
    <link href="https://www.myhuangzhuo.com/2018-9-10-tesseract-training.html"/>
    <id>https://www.myhuangzhuo.com/2018-9-10-tesseract-training.html</id>
    <published>2018-09-10T10:19:00.000Z</published>
    <updated>2023-11-07T05:12:38.858Z</updated>
    
    <content type="html"><![CDATA[<h3 id="tesseract训练"><a href="#tesseract训练" class="headerlink" title="tesseract训练"></a>tesseract训练</h3><h2 id="采集样本："><a href="#采集样本：" class="headerlink" title="采集样本："></a>采集样本：</h2><ul><li>获取足够多的样本数据，必须是能够覆盖所有被识别的字符集，如果字体比较固定比如印刷体或者是网络的字体库，可以尝试采集到每一个字符然后合成字体库，用完整的一套字体库来训练</li></ul><h3 id="三种训练方法对比"><a href="#三种训练方法对比" class="headerlink" title="三种训练方法对比"></a>三种训练方法对比</h3><ol><li>找到需要识别的图片文本的字体，用字体库训练相应的库 (一般验证码很难找到字体库，找到字体的希望很渺茫)；</li><li>采集到足够多的样本，然后切割响应字符串，最后组成一套非重复字符的字体集合，然后训练，亲测有效，特点：准确率高，切割和合并字符可能会麻烦一点;</li><li>采集到尽可能多的样本，用所有的样本来训练，特点：工作量大，效果不一定好</li></ol><h3 id="生成tif字体库"><a href="#生成tif字体库" class="headerlink" title="生成tif字体库"></a>生成tif字体库</h3><p>原始需要识别图片转换成tif字体文件，linux有个convert命令可以转换：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert test.png num.font.exp0.tif</span><br></pre></td></tr></table></figure><h3 id="生成训练文件-tr"><a href="#生成训练文件-tr" class="headerlink" title="生成训练文件.tr"></a>生成训练文件.tr</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tesseract num.font.exp2.tif num.font.exp2 batch.nochop makebox -psm 7 digits</span><br></pre></td></tr></table></figure><ul><li>上面的命令可以更加需求添加相关参数来提高初次识别的准确率<br>下载jTessBoxEditor,运行软件， 然后打开刚刚生成的tif文件来挑战识别有误的字符<br>创建font_properties文件写入：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font 0 0 0 0 0 # 【语法】：&lt;fontname&gt; &lt;italic&gt; &lt;bold&gt; &lt;fixed&gt; &lt;serif&gt; &lt;fraktur&gt;</span><br></pre></td></tr></table></figure></li></ul><p>tesseract.exe num.font.exp0.tif num.font.exp0 nobatch box.train </p><h3 id="生成训练库并打包到语言包目录"><a href="#生成训练库并打包到语言包目录" class="headerlink" title="生成训练库并打包到语言包目录"></a>生成训练库并打包到语言包目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unicharset_extractor *.box</span><br><span class="line">shapeclustering -F font_properties -U unicharset *.tr</span><br><span class="line">mftraining -F font_properties  -U unicharset *.tr</span><br><span class="line">cntraining *.tr</span><br><span class="line">mv unicharset shouxie.unicharset</span><br><span class="line">mv inttemp shouxie.inttemp</span><br><span class="line">mv normproto shouxie.normproto</span><br><span class="line">mv pffmtable shouxie.pffmtable</span><br><span class="line">mv shapetable shouxie.shapetable</span><br><span class="line">combine_tessdata shouxie.</span><br><span class="line">cp shouxie.traineddata /usr/local/share/tessdata/</span><br></pre></td></tr></table></figure><ul><li><p>然后就可以使用shouxie语言库了<br>tesseract ../shouji1.png stdout -l shouxie</p></li><li><p>训练语言库可以两种语言混合，有点类似基因结合，另外还可以用一些图片降噪手段来增加图片的清晰度来提高准确率；tesseract很强大，能做很多事情，期待后面能够找到更多的应用场景；</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;tesseract训练&quot;&gt;&lt;a href=&quot;#tesseract训练&quot; class=&quot;headerlink&quot; title=&quot;tesseract训练&quot;&gt;&lt;/a&gt;tesseract训练&lt;/h3&gt;&lt;h2 id=&quot;采集样本：&quot;&gt;&lt;a href=&quot;#采集样本：&quot; class
      
    
    </summary>
    
      <category term="验证码识别" scheme="https://www.myhuangzhuo.com/categories/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    
    
      <category term="图像识别" scheme="https://www.myhuangzhuo.com/tags/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"/>
    
      <category term="验证码识别" scheme="https://www.myhuangzhuo.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    
      <category term="训练" scheme="https://www.myhuangzhuo.com/tags/%E8%AE%AD%E7%BB%83/"/>
    
  </entry>
  
  <entry>
    <title>图像识别验证码识别神器Tesseract</title>
    <link href="https://www.myhuangzhuo.com/2018-09-07-.html"/>
    <id>https://www.myhuangzhuo.com/2018-09-07-.html</id>
    <published>2018-09-07T10:19:00.000Z</published>
    <updated>2023-11-07T05:12:38.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tesseract简介"><a href="#Tesseract简介" class="headerlink" title="Tesseract简介"></a>Tesseract简介</h3><p>tesseract是一个图像识别库，底层是用C++写的，tesseract支持unicode编码，能够识别100多种语言；<br>Tesseract支持各种输出格式：纯文本，特殊（html），pdf，tsv，仅隐形文本pdf</p><ul><li>tesseract历史:<br>Tesseract最初是在1985年至1994年间在Hewlett-Packard Laboratories Bristol和Greeley Colorado的Hewlett-Packard Co开发的，1996年又进行了一些更改以移植到Windows，并在1998年开始使用一些C ++。2005年，Tesseract开放了 惠普采购。 自2006年以来，它由谷歌开发。</li><li>版本：<br>最新的稳定版本是3.05.01，于2017年6月1日发布。最新的3.05源代码可从GitHub上的3.05分支获得。<br>新的基于LSTM的4.0版本的源代码可从GitHub上的主分支获得。 请注意，该分支正在积极开发中。<br><a href="https://github.com/tesseract-ocr/tesseract" target="_blank" rel="noopener">tesseract官网地址</a></li><li>tesseract可以用来识别图像和验证码，自带的命令可以识别数字字母等，准确率很高，需要中文和其他语言可以自行下载相关的语言库，如果想要再次提高准确率可以抽取足够多的样本，然后自己训练，本人做的电话号码和邮箱的识别库准确率可以接近99%;</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> mac brew install</span><br><span class="line">sudo brew install tesseract</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> ubuntu </span><br><span class="line">sudo apt update &amp;&amp; sudo apt install tesseract-ocr</span><br><span class="line"><span class="meta">#</span> 安装语言包：</span><br><span class="line">sudo apt-get install tesseract-ocr-[lang] # lang是语言</span><br><span class="line"><span class="meta">#</span> 下载所有语言包:</span><br><span class="line">sudo apt-get install tesseract-ocr-all</span><br></pre></td></tr></table></figure><ul><li>当然也可以直接到代码库里面直接下载语言库：<a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="noopener">语言库网址</a>, 下载*.traineddata文件放到本地语言库目录，mac下是:/usr/local/share/tessdata，ubuntu下是:/usr/share/tesseract-ocr/4.00/tessdata/</li></ul><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>安装成功以后执行tesseract如下图<br><img src="/uploads/tesseract/tesseract-cmd.png" alt="tesseract cmd"></p><ul><li>注意一下</li></ul><p>-psm: 参数是指定文本模式，如果是单行文本可以指定为6，<br>-l: 参数指定识别使用的语言库，如eng，</p><ul><li><p>查看当前可用语言库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ocr git:(develop) tesseract --list-langs                                    </span><br><span class="line">List of available languages (10):</span><br><span class="line">chi_sim         # 简体中文库</span><br><span class="line">live10          # 自己训练的语言库</span><br><span class="line">eng             # 英文库</span><br></pre></td></tr></table></figure></li><li><p>识别英文例子：<br>![例子图片]](/uploads/tesseract/tesseract-sample.png)<br>识别以后：<br>![识别后]](/uploads/tesseract/tesseract-recognize.png)</p></li><li><p>识别中文：<br>![例子图片]](/uploads/tesseract/tesseract-ch.png)</p></li></ul><p>![例子图片]](/uploads/tesseract/tesseract-ch-r.png)</p><ul><li>准确率还是很高的，中文是识别出很多空格，可以自行处理一下</li><li>下次会分享如何手动训练自己的语言库，敬请期待</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Tesseract简介&quot;&gt;&lt;a href=&quot;#Tesseract简介&quot; class=&quot;headerlink&quot; title=&quot;Tesseract简介&quot;&gt;&lt;/a&gt;Tesseract简介&lt;/h3&gt;&lt;p&gt;tesseract是一个图像识别库，底层是用C++写的，tesser
      
    
    </summary>
    
      <category term="图像识别" scheme="https://www.myhuangzhuo.com/categories/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"/>
    
    
      <category term="图像识别" scheme="https://www.myhuangzhuo.com/tags/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/"/>
    
      <category term="验证码识别" scheme="https://www.myhuangzhuo.com/tags/%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫利器requests_html</title>
    <link href="https://www.myhuangzhuo.com/2018-8-6-requests_html.html"/>
    <id>https://www.myhuangzhuo.com/2018-8-6-requests_html.html</id>
    <published>2018-08-06T10:19:00.000Z</published>
    <updated>2023-11-07T05:12:38.858Z</updated>
    
    <content type="html"><![CDATA[<h3 id="requests-html："><a href="#requests-html：" class="headerlink" title="requests_html："></a>requests_html：</h3><ul><li>python大神kenneth reitz小哥哥的又一爬虫神器(上次是requests)，官网给出的我这渣渣英语就不翻译了，内容如下：</li></ul><ul><li>Full JavaScript support!</li><li>CSS Selectors (a.k.a jQuery-style, thanks to PyQuery).</li><li>XPath Selectors, for the faint at heart.</li><li>Mocked user-agent (like a real web browser).</li><li>Automatic following of redirects.</li><li>Connection–pooling and cookie persistence.</li><li>The Requests experience you know and love, with magical parsing abilities.</li></ul><ol><li><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests-html</span><br><span class="line"><span class="meta">#</span> requests-html必须3.6以上的python版本</span><br></pre></td></tr></table></figure></li><li><p>使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests_html <span class="keyword">import</span> HTMLSession</span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(<span class="string">'https://python.org/'</span>)</span><br><span class="line"><span class="comment"># 获取页面所有链接</span></span><br><span class="line">r.html.links</span><br><span class="line"><span class="comment"># 获取页面所有链接的绝对地址</span></span><br><span class="line">r.html.absolute_links</span><br><span class="line"><span class="comment"># &#123;'https://github.com/python/pythondotorg/issues', ...&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Select an Element with a CSS Selector </span></span><br><span class="line">about = r.html.find(<span class="string">'#about'</span>, first=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Introspect an Element’s attributes (learn more):</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>about.attrs</span><br><span class="line">&#123;<span class="string">'id'</span>: <span class="string">'about'</span>, <span class="string">'class'</span>: (<span class="string">'tier-1'</span>, <span class="string">'element-1'</span>), <span class="string">'aria-haspopup'</span>: <span class="string">'true'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Search for text on the page:</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.html.search(<span class="string">'Python is a &#123;&#125; language'</span>)[<span class="number">0</span>]</span><br><span class="line">programming</span><br><span class="line"></span><br><span class="line"><span class="comment"># JavaScript Support</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = session.get(<span class="string">'http://myhuangzhuo.com/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r.html.render()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>times = r.html.find(<span class="string">'#busuanzi_value_site_pv'</span>, first=<span class="literal">True</span>)</span><br><span class="line">In [<span class="number">7</span>]: times.text</span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">'270 次'</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>requests_html 对css选择器操作和xpath比较强大，加载简单的带js的页面支持很好；</li><li>js加载需要下载pyppeteer和相关浏览器支持，目前来看在截图和点击模拟用户行为操作方面没有phantomjs强大，功能有待发掘；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;requests-html：&quot;&gt;&lt;a href=&quot;#requests-html：&quot; class=&quot;headerlink&quot; title=&quot;requests_html：&quot;&gt;&lt;/a&gt;requests_html：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;python大神kenneth 
      
    
    </summary>
    
      <category term="python" scheme="https://www.myhuangzhuo.com/categories/python/"/>
    
    
      <category term="python" scheme="https://www.myhuangzhuo.com/tags/python/"/>
    
      <category term="爬虫" scheme="https://www.myhuangzhuo.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="requests_html" scheme="https://www.myhuangzhuo.com/tags/requests-html/"/>
    
  </entry>
  
  <entry>
    <title>uwsgi和gunicorn</title>
    <link href="https://www.myhuangzhuo.com/2018-07-26-uwsgi-gunicorn.html"/>
    <id>https://www.myhuangzhuo.com/2018-07-26-uwsgi-gunicorn.html</id>
    <published>2018-07-26T01:49:32.000Z</published>
    <updated>2023-11-07T05:12:38.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="WSGI-、uwsgi-与-uWSGI-的区别"><a href="#WSGI-、uwsgi-与-uWSGI-的区别" class="headerlink" title="WSGI 、uwsgi 与 uWSGI 的区别"></a>WSGI 、uwsgi 与 uWSGI 的区别</h3><ul><li><p>WSGI：只是一种规范，描述web server如何与web application通信的规范，运行在WSGI协议之上的框架有Bottle, Flask, Django ；</p></li><li><p>uwsgi：是uWSGI服务器的独有通信协议，据说该协议是fcgi协议的10倍快；</p></li><li><p>uWSGI：是一个web服务器，实现了WSGI协议、uwsgi协议、http协议等；</p></li></ul><h3 id="WSGI规范"><a href="#WSGI规范" class="headerlink" title="WSGI规范"></a>WSGI规范</h3><p>WSGI 其实是定义了一种server与application解耦的规范；</p><p>WSGI server： uWSGI、gunicorn ；</p><p>WSGI app：bottle、flask、django、tornado<br><img src="/uploads/uwsgi-gunicorn/uwsgi.png" alt="wsgi"></p><h3 id="uWSGI支持的并发模型"><a href="#uWSGI支持的并发模型" class="headerlink" title="uWSGI支持的并发模型"></a>uWSGI支持的并发模型</h3><ul><li>Multiprocess</li><li>Multithreaded</li><li>gevent</li><li>greenlet + uWSGI async</li><li>uWSGI native async api</li><li>Coro::AnyEvent</li><li>Ruby fibers + uWSGI async</li><li>Ruby threads</li><li>uGreen + uWSGI async<h3 id="uWSGI常用参数配置"><a href="#uWSGI常用参数配置" class="headerlink" title="uWSGI常用参数配置"></a>uWSGI常用参数配置</h3>socket ： 地址和端口号；<br>http：开启一个http服务和socket服务；<br>processes ： 开启的进程数量；<br>workers ： 开启的进程数量，等同于processes；<br>chdir ： 指定运行目录<br>wsgi-file ： 载入wsgi-file（load .wsgi file）<br>threads ： 运行线程数；<br>http-websockets：websocket支持；<br>master ： 允许主进程存在；<br>module： 指定需要加载的WSGI模块；<br>callable：  指定哪个变量将被调用，默认是名字为“application”的变量；<br>daemonize ： 使进程在后台运行，并将日志打到指定的日志文件；<br>pidfile ： 指定pid文件的位置，记录主进程的pid号；<br>disable-logging ： 不记录请求信息的日志。只记录错误以及uWSGI内部消息到日志中；</li></ul><h3 id="uWSGI基本命令"><a href="#uWSGI基本命令" class="headerlink" title="uWSGI基本命令"></a>uWSGI基本命令</h3><p>启动： uwsgi -i uwsgi.ini</p><p>重启：uwsgi –reload uwsgi.pid</p><p>停止：uwsgi –stop uwsgi.pid</p><p>更多：uwsgi –help</p><h3 id="uwsgi与gunicorn性能对比-先挖个坑，明天再补"><a href="#uwsgi与gunicorn性能对比-先挖个坑，明天再补" class="headerlink" title="uwsgi与gunicorn性能对比 (先挖个坑，明天再补)"></a>uwsgi与gunicorn性能对比 (先挖个坑，明天再补)</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;WSGI-、uwsgi-与-uWSGI-的区别&quot;&gt;&lt;a href=&quot;#WSGI-、uwsgi-与-uWSGI-的区别&quot; class=&quot;headerlink&quot; title=&quot;WSGI 、uwsgi 与 uWSGI 的区别&quot;&gt;&lt;/a&gt;WSGI 、uwsgi 与 uWS
      
    
    </summary>
    
      <category term="python" scheme="https://www.myhuangzhuo.com/categories/python/"/>
    
    
      <category term="python" scheme="https://www.myhuangzhuo.com/tags/python/"/>
    
      <category term="uwsgi" scheme="https://www.myhuangzhuo.com/tags/uwsgi/"/>
    
      <category term="gunicorn" scheme="https://www.myhuangzhuo.com/tags/gunicorn/"/>
    
  </entry>
  
  <entry>
    <title>selenium python笔记</title>
    <link href="https://www.myhuangzhuo.com/2018-6-13-selenium-python.html"/>
    <id>https://www.myhuangzhuo.com/2018-6-13-selenium-python.html</id>
    <published>2018-06-13T03:49:32.000Z</published>
    <updated>2023-11-07T05:12:38.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="selenium-python"><a href="#selenium-python" class="headerlink" title="selenium python"></a>selenium python</h3><ul><li>最新版selenium 3.x已经不支持phantomjs了，桑心；需要用phantomjs的可以用selenium2.x</li><li>selenium调用webdriver可以是本地的浏览器也可以是远程的，本地的webdriver(chrome,firefox)都需要下载driver，远程的需要下载一个selenium-stand，然后java -jar selenium-server-standalone-3.12.0.jar</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.desired_capabilities <span class="keyword">import</span> DesiredCapabilities</span><br><span class="line">USER_AGENT = <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36'</span></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">'user-agent=&#123;&#125;'</span>.format(USER_AGENT))</span><br><span class="line">chrome_options.add_argument(<span class="string">'--headless'</span>)</span><br><span class="line"><span class="comment"># local webdriver</span></span><br><span class="line">driver = webdriver.Firefox(executable_path=<span class="string">'./geckodriver'</span>, firefox_options=chrome_options)</span><br><span class="line"><span class="comment"># remote webdriver</span></span><br><span class="line">dcap = dict(DesiredCapabilities.PHANTOMJS)</span><br><span class="line">dcap[<span class="string">"phantomjs.page.settings.userAgent"</span>] = (</span><br><span class="line">    <span class="string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.181 Safari/537.36'</span></span><br><span class="line">)</span><br><span class="line">driver = webdriver.remote.webdriver.WebDriver(command_executor=<span class="string">"http://172.16.56.13:4444/wd/hub"</span>,</span><br><span class="line">                                        desired_capabilities=dcap)</span><br><span class="line"><span class="comment"># set cookie</span></span><br><span class="line">driver.get(<span class="string">'https://baidu.com/'</span>)</span><br><span class="line">driver.delete_all_cookies()</span><br><span class="line">cookie_list = [</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'hehe'</span>, <span class="string">'value'</span>:<span class="string">'222'</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> cookie_list:</span><br><span class="line">    driver.add_cookie(i)</span><br><span class="line">real_url = <span class="string">'https://baidu.com'</span></span><br><span class="line">driver.get(real_url)</span><br><span class="line"><span class="comment"># screenshot</span></span><br><span class="line">driver.get_screenshot_as_file(before_png)</span><br><span class="line"><span class="comment"># save html</span></span><br><span class="line"><span class="keyword">with</span> open(before_html, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(driver.page_source.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="comment"># find selector and click</span></span><br><span class="line">next_step = driver.find_element_by_css_selector(<span class="string">'a[data="guideLayer"]'</span>)</span><br><span class="line">next_step.click()</span><br><span class="line"><span class="comment"># scrop selector</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crop_selector</span><span class="params">(driver, filename, selector, dist)</span>:</span></span><br><span class="line">    <span class="string">""" crop photo through selector. """</span></span><br><span class="line">    element = driver.find_element_by_css_selector(selector)</span><br><span class="line">    left = element.location[<span class="string">'x'</span>]</span><br><span class="line">    top = element.location[<span class="string">'y'</span>]</span><br><span class="line">    right = element.location[<span class="string">'x'</span>] + element.size[<span class="string">'width'</span>]</span><br><span class="line">    bottom = element.location[<span class="string">'y'</span>] + element.size[<span class="string">'height'</span>]</span><br><span class="line"></span><br><span class="line">    im = Image.open(filename)</span><br><span class="line">    im = im.crop((left, top, right, bottom))</span><br><span class="line">    im.save(dist)</span><br><span class="line">crop_selector(driver, full_screen, <span class="string">'img.book'</span>, email)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><ul><li>几个小坑</li></ul><ol><li>add_cookie在使用chrome或firefox作为webdriver的时候，必须先get一次目标站点的域名，然后再add，推测可能是driver的问题，使用phantomjs可以直接add之后再get；</li><li>remote webdriver使用phantomjs必须使用selenium-server-standalone-2.x.jar<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar selenium-server-standalone-2.53.1.jar  -Dphantomjs.binary.path=/usr/local/bin/phantomjs</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;selenium-python&quot;&gt;&lt;a href=&quot;#selenium-python&quot; class=&quot;headerlink&quot; title=&quot;selenium python&quot;&gt;&lt;/a&gt;selenium python&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;最新版selenium 
      
    
    </summary>
    
      <category term="爬虫" scheme="https://www.myhuangzhuo.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://www.myhuangzhuo.com/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="selenium" scheme="https://www.myhuangzhuo.com/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>获取http only数据</title>
    <link href="https://www.myhuangzhuo.com/2018-3-28-get_http_only.html"/>
    <id>https://www.myhuangzhuo.com/2018-3-28-get_http_only.html</id>
    <published>2018-03-28T03:49:32.000Z</published>
    <updated>2023-11-07T05:12:38.857Z</updated>
    
    <content type="html"><![CDATA[<p>###nightmare</p><p>A Conservative<br>Published<br>November 19, 2016<br>in JavaScript<br>爬虫的终极形态：nightmare<br>nightmare 是一个基于 electron 的自动化库（意思是说它自带浏览器），用于实现爬虫或自动化测试。相较于传统的爬虫框架（scrapy/pyspider），或者dom操作库（cheerio/jsdom），或者基于浏览器的自动化框架（selenium/phantomjs），他的优势在于提供了一个简洁有效 的编程模型。</p><p>###安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install init -y </span><br><span class="line">npm install --save-dev spectron</span><br><span class="line">npm install --save nightmare</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>###获取cookie</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">option = &#123;</span><br><span class="line">openDevTools: &#123;</span><br><span class="line">      mode: <span class="string">'bottom'</span>,       <span class="comment">// 开发者工具位置：right, bottom, undocked, detach</span></span><br><span class="line">&#125;,</span><br><span class="line">  show: <span class="literal">true</span>,                 <span class="comment">// 要不要显示浏览器</span></span><br><span class="line">  dock: <span class="literal">true</span>,                 <span class="comment">// 要不要在Dock上显示图标</span></span><br><span class="line">  waitTimeout: <span class="number">6000000</span>,         <span class="comment">// .wait() 方法超时时长，单位:ms</span></span><br><span class="line">  executionTimeout: <span class="number">86400000</span>, <span class="comment">// .evaluate() 方法超时时长，单位:ms</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Nightmare = <span class="built_in">require</span>(<span class="string">'nightmare'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nightmare = Nightmare(option);</span><br><span class="line"></span><br><span class="line">nightmare.goto(<span class="string">'https://baidu.com/'</span>)</span><br><span class="line">  .evaluate(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.title;</span><br><span class="line">  &#125;)</span><br><span class="line">  .wait(<span class="string">'#MainMenuNew1_m3'</span>)</span><br><span class="line">  <span class="comment">//.cookies.get(&#123; url: null &#125;)</span></span><br><span class="line">  .cookies.get(&#123;</span><br><span class="line">     domain: <span class="string">'baidu.com'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">cookies</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(cookies);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'加载完成'</span>);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###nightmare&lt;/p&gt;
&lt;p&gt;A Conservative&lt;br&gt;Published&lt;br&gt;November 19, 2016&lt;br&gt;in JavaScript&lt;br&gt;爬虫的终极形态：nightmare&lt;br&gt;nightmare 是一个基于 electron 的自
      
    
    </summary>
    
      <category term="爬虫" scheme="https://www.myhuangzhuo.com/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="cookie" scheme="https://www.myhuangzhuo.com/tags/cookie/"/>
    
      <category term="爬虫" scheme="https://www.myhuangzhuo.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python中使用grpc</title>
    <link href="https://www.myhuangzhuo.com/2018-3-27-grpc.html"/>
    <id>https://www.myhuangzhuo.com/2018-3-27-grpc.html</id>
    <published>2018-03-27T03:49:32.000Z</published>
    <updated>2023-11-07T05:12:38.857Z</updated>
    
    <content type="html"><![CDATA[<p>###简介<br>gRPC  是一个高性能、开源和通用的 RPC 框架，面向移动和 HTTP/2 设计。目前提供 C、Java 和 Go 语言版本，分别是：grpc, grpc-java, grpc-go. 其中 C 版本支持 C, C++, Node.js, Python, Ruby, Objective-C, PHP 和 C# 支持.</p><p>gRPC 基于 HTTP/2 标准设计，带来诸如双向流、流控、头部压缩、单 TCP 连接上的多复用请求等特。这些特性使得其在移动设备上表现更好，更省电和节省空间占用。</p><p>###gRPC 是什么？<br>在 gRPC 里客户端应用可以像调用本地对象一样直接调用另一台不同的机器上服务端应用的方法，使得您能够更容易地创建分布式应用和服务。与许多 RPC 系统类似，gRPC 也是基于以下理念：定义一个服务，指定其能够被远程调用的方法（包含参数和返回类型）。在服务端实现这个接口，并运行一个 gRPC 服务器来处理客户端调用。在客户端拥有一个存根能够像服务端一样的方法。</p><p><img src="/img/in-post/post-grpc/grpc_concept_diagram.png" alt="正则图"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install grpc</span><br><span class="line">pip install grpcio</span><br><span class="line">pip install grpcio-tools</span><br></pre></td></tr></table></figure><p>####编写数据data.proto</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line">package example;</span><br><span class="line">message Data &#123;</span><br><span class="line">  string text = 1;</span><br><span class="line">&#125;</span><br><span class="line">service FormatData &#123;</span><br><span class="line">  rpc DoFormat(Data) returns (Data)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####生成客户端和服务器端代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m grpc_tools.protoc -I. –python_out=. –grpc_python_out=. data.proto</span><br></pre></td></tr></table></figure><p>###客户端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> grpc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> data_pb2_grpc</span><br><span class="line"><span class="keyword">import</span> data_pb2</span><br><span class="line"></span><br><span class="line">_HOST = <span class="string">'0.0.0.0'</span></span><br><span class="line">_PORT = <span class="string">'8080'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    conn = grpc.insecure_channel(_HOST + <span class="string">':'</span> + _PORT)</span><br><span class="line">    client = data_pb2_grpc.FormatDataStub(channel=conn)</span><br><span class="line">    response = client.DoFormat(data_pb2.Data(text=<span class="string">'hello,world!'</span>))</span><br><span class="line">    print(<span class="string">"received: "</span> + response.text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure><p>###服务器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> grpc</span><br><span class="line"><span class="keyword">from</span> concurrent <span class="keyword">import</span> futures</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> data_pb2_grpc</span><br><span class="line"><span class="keyword">import</span> data_pb2</span><br><span class="line"></span><br><span class="line">_ONE_DAY_IN_SECONDS = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span></span><br><span class="line">_HOST = <span class="string">'0.0.0.0'</span></span><br><span class="line">_PORT = <span class="string">'8080'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormatData</span><span class="params">(data_pb2_grpc.FormatDataServicer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">DoFormat</span><span class="params">(self, request, context)</span>:</span></span><br><span class="line">        str = request.text</span><br><span class="line">        <span class="keyword">return</span> data_pb2.Data(text=str.upper())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serve</span><span class="params">()</span>:</span></span><br><span class="line">    grpcServer = grpc.server(futures.ThreadPoolExecutor(max_workers=<span class="number">4</span>))</span><br><span class="line">    data_pb2_grpc.add_FormatDataServicer_to_server(FormatData(), grpcServer)</span><br><span class="line">    grpcServer.add_insecure_port(_HOST + <span class="string">':'</span> + _PORT)</span><br><span class="line">    grpcServer.start()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'enter try'</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'enter True'</span></span><br><span class="line">            time.sleep(_ONE_DAY_IN_SECONDS)</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'after time.sleep'</span></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        grpcServer.stop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    serve()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;###简介&lt;br&gt;gRPC  是一个高性能、开源和通用的 RPC 框架，面向移动和 HTTP/2 设计。目前提供 C、Java 和 Go 语言版本，分别是：grpc, grpc-java, grpc-go. 其中 C 版本支持 C, C++, Node.js, Python
      
    
    </summary>
    
      <category term="grpc" scheme="https://www.myhuangzhuo.com/categories/grpc/"/>
    
    
      <category term="python" scheme="https://www.myhuangzhuo.com/tags/python/"/>
    
      <category term="google" scheme="https://www.myhuangzhuo.com/tags/google/"/>
    
      <category term="grpc" scheme="https://www.myhuangzhuo.com/tags/grpc/"/>
    
  </entry>
  
  <entry>
    <title>改善程序员生活质量的 3+10 习惯</title>
    <link href="https://www.myhuangzhuo.com/2017-11-21-improve-quality-of-life.html"/>
    <id>https://www.myhuangzhuo.com/2017-11-21-improve-quality-of-life.html</id>
    <published>2017-11-21T03:49:32.000Z</published>
    <updated>2023-11-07T05:12:38.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="段子背后的真相"><a href="#段子背后的真相" class="headerlink" title="段子背后的真相"></a>段子背后的真相</h3><p>有一则段子是这么描述程序员的职业发展：</p><blockquote><p>某编程语言入门 -&gt; 某编程语言进阶 -&gt; 某编程语言最佳实践 -&gt; 架构的艺术 -&gt; 颈椎病康复指南.</p></blockquote><p>  每次看到这个段子，我都只是一笑而过，还偶尔给别人讲起逗逗乐。可如今它不仅是一个段子，更像是一则不那么古老的寓言应验了！或许你会说：腰肌劳损、腰椎盘突出、颈椎弯曲这些在程序员圈子司空见惯了。<br>  真相又是什么呢？因为我身边的例子为数不多，我仍然跟之前一样保持疑问的态度。<br>  可不管真相如何，这封邮件却触动了我，让我想写点东西，来分享我平时在做且自认为很有意义的事情。</p><h3 id="认知是一切的基础"><a href="#认知是一切的基础" class="headerlink" title="认知是一切的基础"></a>认知是一切的基础</h3><p>  古人所说知行合一，强调的是认知和行为一致，人们在做一件事情之前首先是要形成一定的认知。比如，我为什么要持续学习？我为什么要花时间去健身？而只有当我的认知中，认识到学习是具备价值，认识到健身是能给我带来益处的时候，我才会自我驱动地去做这些事情，在行动的过程中达到知行合一。<br>  我曾经给一些朋友讲健康饮食、规律作息和运动健身的好处，讲它们对一个人工作生活有多么重要的影响，当他们若有所感地回应我的时候，我会接着告诉他们一些健康的食物、一些规律的作息时间、一些健身的软件和圈子。到最后，我才发现，他们几乎没有改变。一方面，因为他们没有切身体会到这些好处，另一方面，他们目前的生活并没有无法容忍的痛点，偶尔抱怨一下也只是过过嘴瘾。</p><blockquote><p>根本原因在于认知！</p></blockquote><p>  最快改变一个人的认知的方式是残酷地摧毁这个人先前的认知。举个真实极端点的例子：某某因为工作长期无节制的饮食和无规律的作息查出胃癌晚期的时候，即便用所有的钱去换回健康也为时过晚，我相信此时ta比任何人都知道健康的重要性，如果可以再来，他一定会摒弃之前所有的不良习惯，好好生活。<br>  另外一种改变认知的方式就是形成一定的基础认知，然后通过身体力行，循序渐进地付出努力去强化自己的认知，最终达到知行合一。<br>  我将从健康饮食、规律作息和健身运动方面去分享一些小知识。一旦形成了这种认知，我们就可以通过养成一些小习惯来不断强化提升，而作为一枚程序员的我也一直在通过这种方式不断地改善自己的工作效率，提升生活质量。</p><blockquote><p>让行为成为习惯</p></blockquote><p>  《不抱怨的世界》中介绍了一个21天不抱怨手环，旨在坚持连续21天不抱怨，一旦说出了抱怨的话就将手环从一只手移动到另一只手，并且重新计数。如果你也跟我一样这么想：<br>不就是21天嘛，小case，看我是如何做到的！<br>  你就大错特错了。因为我一开始也是这么想的，结果…! 至于为什么是21天呢，相信大家耳熟能详了。<br>  看似不长的21一天，连续坚持下来却是一个大大的考验。有了21天培养一个习惯的指导方针，我们应该大胆相信自己能将饮食、作息、运动相关的良好行为培养成习惯，从而决定我们身体的命运（习惯决定性格，性格决定命运）<br>  《黄帝内经》中素问上第一章 上古天真论中提到 “食饮有节，起居有常，不妄作劳，故能形与神俱，而尽终其天年，度百岁乃去”。下面我们就来探讨一下食饮有节，起居有常，不妄作劳的奥秘。</p><h3 id="食饮有节"><a href="#食饮有节" class="headerlink" title="食饮有节"></a>食饮有节</h3><blockquote><p>饮食应该持有节制，切勿暴饮暴食或不吃不喝。</p></blockquote><p>  不可否认，很多疾病是吃出来的。暴饮暴食和绝食都属于极端的行为。而相比于长期因为营养不足引发营养不良，长期暴饮暴食导致体内毒素积累过度带来的危害更为严重。有人说：我要减肥，必须控制饮食，从而控制体重。<br>  没错，控制饮食是控制体重的最好的方式（另外配合运动更加健康）。也就是经常饿一饿，但饿也是有讲究的，先来看看一些极为不健康的饿法：</p><ol><li>早起太晚，没时间吃早餐，匆匆忙忙赶到办公室饿着肚子干到中午。</li><li>中午外面太阳太热了，外卖已吃腻，两杯咖啡打发下午。</li><li>晚上好饿呀，撑不住了，正道人间美味，何不享受今宵。<br>　　再来看看健康的饿法：</li><li>早上有点饿感，（空腹练上30分钟左右的瑜伽），喝杯温水，洗漱完给自己做一顿营养早餐（量不大）。</li><li>中午饭点了，饿感来袭，去吃一顿7、8分饱的午餐，午休30分钟。</li><li>晚上了有点饿，少吃一些杂粮饼干、水果，避免带着饿感入睡（因为很难睡着）。<br>古人云：饿治百病。饭吃到7、8分饱，晚上不给胃添加过大的负担。而且我的经验证明（当然还有受我蛊惑的朋友），晚上少吃能够有效地减到肚子上的赘肉。另外，晚上少吃能够让身体的各个器官能得到充分休息，第二天醒来大脑会很清醒。而伴随着起床困难症的消逝，你会积极的起床为自己准备一份渴望了一晚上的精美早餐（当然，自己做早餐是一件美好的事情）。<br>老饿着也不行，那我们吃些什么呢？俗话说：早上吃得向皇帝，中午吃得香平民，晚上吃得像乞丐。<br>科学研究表明人体每天从三餐摄入的营养比例分别是40%、40%、20%，而保证这些营养的摄入，我们需要每天摄入适量的水果、蔬菜、谷物和蛋白质。<br>以早餐为例，我们可以摄入一定量的谷物，比如面包、包子、燕麦等；以高蛋白饮食为主，比如鸡蛋、牛奶、牛肉等；配合着蔬菜，比如西蓝花、西红柿、黄瓜、青椒等；再搭配上饱含微量元素的干果类，比如核桃、开心果、腰果、松子、葡萄干等。然后饭后搭配上水果，比如猕猴桃、香蕉、苹果。<br>如果你觉得这些东西准备起来比较麻烦，还有一种选择：代餐。比如我最近一直在吃五谷磨房的“八珍元”早餐粉，它使用了八种原材料经过高温烘焙然后研磨成粉，搭配“五谷伴侣”一起饮食，只需要10分钟就可以准备好一顿营养丰富的早餐，当然，奖励自己一个鸡蛋或一勺植物蛋白粉或几块牛肉会让早餐更加美味。<br>我已经给身边的好几位朋友推荐了代餐，而我自己通过长时间的饮食，成功减去内脂和小肚皮上的肉！</li></ol><h3 id="起居有常"><a href="#起居有常" class="headerlink" title="起居有常"></a>起居有常</h3><p>  日出而作，日落而息描述了淳朴农名的作息规律。记得小时候，父母9点就睡觉了，早上5点多就起床了。<br>  而深居都市的大多数白领，喧嚣的夜生活，睡不起的懒觉，颠倒了自然法则的作息习惯。已经很少有人会去睡子午觉了。何为子午觉：<br>子时：23:00 ~ 01：00；午时：11:00 ~ 13：00；<br>  夜半子时为阴阳大会，水火交泰之际，称为“合阴”，它是一天中阴气最重的时候，也是睡眠的最佳时机，子时之前入睡有利于养阴；日间午时也是阴阳交会的时候，阳气最盛，称为“合阳”，此时午睡有利于养阳。<br>  子午觉的原则是子时大睡，午时小憩，即晚上在子时之前（23:00之前）最好入睡，对于不得不从事熬夜工作的人，与其一直熬到凌晨3、4点，不如在子时这段时间睡上一会儿，因为这段时间的睡眠效率远远超过其他时间段，夸张点说一分钟等于一小时。午觉则只需在午时（11时～13时）休息30分钟左右即可，因为此时阳气盛，工作效率最好，午睡时间过长，不仅浪费宝贵的时间，而且会扰乱人体生物钟，影响晚上睡眠。但是午睡一定要睡，即便睡不着，也要闭目养神，这样有利于人体阴阳之气的正常交接。<br>  在作息中，子午觉对健康极为重要，它还是一种不花钱的养生方法，睡好子午觉，你的身体多了一层保障了。</p><h3 id="不妄作劳"><a href="#不妄作劳" class="headerlink" title="不妄作劳"></a>不妄作劳</h3><p>  不妄作劳，结合新时代有不一样的解读，不要忘记劳作，即要保持运动，也不要过于劳作，即不要运动过量。<br>  回到我们文章一开始说的那封离职邮件，因为程序员的工作性质，绝大部分程序员是长时间对着电脑工作的，加上某些公司存在加班文化，久坐的时间就更加延长了。所以导致了很多诸如腰椎盘突出、颈椎病、肩周炎、腰肌劳损、圆肩驼背等职业病。<br>  那么如何缓解这些问题？除了坐姿端正，注意休息，更要加强运动锻炼。因为运动一方面能够加强肌肉的力量和耐力，另一方面能够活动身体的各个关节，能够有效缓解一个长时间保持一个动作导致局部肌肉过劳。</p><h3 id="那么问题来了，如何科学地运动呢？"><a href="#那么问题来了，如何科学地运动呢？" class="headerlink" title="那么问题来了，如何科学地运动呢？"></a>那么问题来了，如何科学地运动呢？</h3><p>  我平日里听到最多的是我要减肥，将身体的脂肪减掉。好，我就说一个绝对有效且简单的减脂秘方：每天45分钟动感单车。是不是很简单，只用跟着教练跑上45分钟，体脂一定能够降下来。但是有多少人能够坚持去做好这45分钟呢？所以当有人夸赞我是教练的时候，我会告诉他我如果教学员，秘诀只在于两字：<br>　　坚持!<br>问：花钱办健身卡会不会因为不常去导致浪费？<br>答：已经有很多徒手的运动，比如跑步、HIIT、Tabata、瑜伽、徒手胸肌训练，徒手腹肌、空手拳击、腰背拉伸等；<br>问：缺乏专业教练的指导会不会练不好？<br>答：已经有很多软件提供了免费且科学的指导，比如 移动健身教练：Keep、私人瑜伽教练：Wake。<br>问：有自虐倾向，担心练过火了，身体吃不消？<br>答：运动健身不宜过度，要以自身身体感觉为依据，不能影响正常的食欲、工作和睡眠。<br>　　运动健身无处不在，如果你也有以上三个疑问，不妨利用瑜伽垫 + 4平米 + Keep就可以在家里开创一片健身的空间。当然健身卡能提供更丰富的选择，而能否坚持完全取决于我们自己。坚持两字则包含了深不见底的学问。</p><h3 id="习惯的力量"><a href="#习惯的力量" class="headerlink" title="习惯的力量"></a>习惯的力量</h3><blockquote><p>食饮有节，起居有常，不妄作劳 ==&gt; 故能形与神俱，而尽终其天年，度百岁乃去。<br>　　饮食、作息、运动三者息息相关，相辅相成。三分练，七分吃，充足睡眠不丢失。如果到这里，你已经对它们的认知更进一步了，接下来我么来枚举一下围绕着这三个方面的10个小习惯：</p></blockquote><ol><li>早起空腹一杯温水，减轻肠胃的负累。</li><li>按时吃饭，越忙越要好好吃饭。</li><li>吃饭只吃七、八分饱，键肠胃。</li><li>切勿暴饮暴食，晚上少吃，尤其是油腻食物。</li><li>每天揉3~8分钟足三里穴，可以健脾胃。</li><li>中午（午时）午休半小时，夜间23:00（子时）前入睡。</li><li>每工作1~2小时，起身走动倒杯水，再忙也要喝水。</li><li>将运动融入工作中，每天定时做做运动（平板支撑、颈椎操等），10~30分钟即可。</li><li>下班后适量地健身运动，越忙越要保持运动。</li><li>坚持做上面9条。<br>将上面的事情坚持做上21天，我相信你一定可以感知到习惯的力量。<br>重点要指出，现在大多数职业都需要久坐，尤其是程序员，要养成定时活动颈椎和腰椎的习惯，保持健身运动，而这些完全可以融入到工作和生活的间隙中。不要为了节省短暂的半小时去拼命工作，也不要吝啬花上15分钟去吃一份有营养的早餐。这些时间终究会通过提升工作效率来弥补上。不可否认，现实中那些工作忙得不可开交、却依然重视饮食且投入1~2小时到健身中的职场精英早已经养成了这些习惯。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;段子背后的真相&quot;&gt;&lt;a href=&quot;#段子背后的真相&quot; class=&quot;headerlink&quot; title=&quot;段子背后的真相&quot;&gt;&lt;/a&gt;段子背后的真相&lt;/h3&gt;&lt;p&gt;有一则段子是这么描述程序员的职业发展：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;某编程语言入门 -&amp;
      
    
    </summary>
    
      <category term="生活" scheme="https://www.myhuangzhuo.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="程序员" scheme="https://www.myhuangzhuo.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="生活质量" scheme="https://www.myhuangzhuo.com/tags/%E7%94%9F%E6%B4%BB%E8%B4%A8%E9%87%8F/"/>
    
      <category term="习惯" scheme="https://www.myhuangzhuo.com/tags/%E4%B9%A0%E6%83%AF/"/>
    
  </entry>
  
  <entry>
    <title>PayPal和LinkedIn创始人Reid Hoffman的ABZ理论</title>
    <link href="https://www.myhuangzhuo.com/2017-09-27-Career-ABZ-Plan.html"/>
    <id>https://www.myhuangzhuo.com/2017-09-27-Career-ABZ-Plan.html</id>
    <published>2017-09-26T08:18:32.000Z</published>
    <updated>2023-11-07T05:12:38.854Z</updated>
    
    <content type="html"><![CDATA[<p>我们一向把创业视为一件非常有风险的事。说起来挺矛盾，创业者经常看不起那些职场金领，但是前者在后者眼中也只是一群吃了上顿没下顿的流浪汉而已。所以这里最大的挑战就是：一个人如何让自己勇于拓展机会，但同时又不要冒太大风险，乃至于丢掉饭碗血本无归？讲到成功的把这两点结合在一起的方法，Reid Hoffman应该是最有发言权的。</p><p>LinkedIn的经历让他了解了职场万象，按他的说法，渐进式的职业规划和冒险创业是可以两全的。他发明了一套独有的职业规划理论，叫做“A-B-Z 职业规划”法则。这虽然也是在做职业规划，但是却强调试验、鼓励不确定性。而且它也不仅仅适合年轻人，对于三四十岁的“职场老人”来说一样适用。所谓的A、B、和Z分别都是什么意思呢？<br><strong>原文：<a href="https://techcrunch.com/2012/02/14/in-startups-and-life-you-need-plan-a-b-and-z/" target="_blank" rel="noopener">In Startups And Life, You Need Plan A, B, And Z</a></strong></p><p><strong>A-B-Z 职业规划</strong><br>A指的是你现在正在做的事情，或者叫主业。比如说它可能是你的专业，是你优势比较集中的领域，你是喜欢它也好不喜欢它也好，现在都得靠它吃饭。用不断的、小小的进步把主业做好当然是属于“敬业”的范畴，不过，当你逐渐的发现你可能需要一个更大的改变的时候，那就是转变到B计划上的时候了。这种转变绝对不是随机的瞎选，而是根据你已经有的经验和知识去看一条新的路径，并且等待这条新的路径逐渐变得清晰。当然，一旦你变完之后，这个B计划就成为新的A计划了。</p><p>这个从A到B的过程是最微妙的地方。为了保持决策的合理性，让自己停留在一个安全的轨道上，但同时又不束缚手脚，值得鼓励的方法是去有选择的“赌”一些后果可以收回的小事。既然咱们已经决定要给自己做出些改变了，那走些小弯路是肯定的。不过最好别让他们带来比较永久的损伤。同时我们要想方设法让自己的A计划和B计划逐渐靠拢，让B计划可以帮助到主业上，别变成完全的“不务正业”。</p><p>A指的是主业，B自然就是一个潜在的可以去达到自己理想中的目标的另外路径。假如A不管用了，你可以尝试在B上面投入更多的时间。B可以是一个和A同类别的事情，这样的你的技能是可以转移的。也可以是一个新发现的、不同领域的机会。那你怎么知道什么时候应该换什么时候不应该换呢？有些改变比较小，比如说换个部门，但有些改变就比较大了，比如说换工作，甚至完全改变一个行业。说实在，在做出改变之前谁也不知道自己变得对不对。不过，起码在科技领域，一个基本的一般规律是在大潮到来之前行动要比在大潮到来之后行动好。这说明，如果你想去抓住某些机会，就必须得冒你自己很努力的去做，但是结果这个浪头没有来的风险。具体到每件事情的话，该不该跳，什么时候跳都是个人洞察力、直觉、运气等等的融合。</p><p>最后，Z是一个保底选项。也就说，假如你的冒险全部都失败了，最差能怎么样？这个问题要想好，因为对于不同年龄不同处境的人保底选项是不一样的。这就是为什么人越年轻他冒险的成本越低。毕竟，我们平常说的所有关于创业的东西，恐怕都是说起来容易做起来难，那是因为他们会带来真正的不确定性，不确定性是最让人害怕的。所以想要解决这一点的方法就是在底下垫一个非常确定的计划。那就是计划Z，计划Z会确保你就算所有其他东西都搞砸了也还不至于露宿街头。它存在的最大意义是让我们对自己能承受多大的失败有个谱，虽然说不管什么样的失败肯定都是让人痛苦的，但是没有计划Z的话可能我们根本就不敢去冒险。</p><p><strong>从失败的婚恋网站，到PayPal，再到LinkedIn ，看看 Reid Hoffman这些年</strong></p><p>直接启发Reid Hoffman开发出这个ABZ法则的是他自己的职业生涯。值得注意的是，Hoffman和许多硅谷的传奇人物相比恐怕是要“普通”多了。他既没有大学辍学、也不是电脑天才，但是由于他总能敏锐观察自己的职业轨迹，善于辗转腾挪，依然取得了今天的成就。</p><p>他在离开学界之后首先创立了个婚恋网站叫socialnet.com。他的朋友Peter Thiel和Max Levchin当时创办了PayPal。出于对好朋友的支持，Hoffman决定把自己的空闲时间都贡献出来，每天在自己的公司工作到半夜，然后给另外俩人打电话去处理PayPal的事情。这种同时做两个创业公司的高强度生活持续了一两年，很快，他的A计划快不行了，网站关门在即，当时他的面前有两个B计划：要不找一份比较安稳的其他的技术工作，要不在第一次创业已经失败的情况下再赌一把，加入PayPal。Hoffman想了想，选了第二个。</p><p>PayPal迅速崛起后，后来的故事咱就都知道了。值得注意的是，这个故事还影响到了Reid Hoffman人生的第二次重大决策。2002年PayPal以15亿美元被收购，员工们在发了大财之后都跑去度假了。而他估计是还没从这几年来过山车中的经历中缓过劲来，在澳大利亚的海滩上躺着晒太阳时，突然一拍大腿，发现：“不对！我这些年这么多起起落落而最终不死，就是因为我总是在寻找新机会，并能够灵活的调整方向。现在PayPal刚刚发了大财，但同时也意味着它就完事儿了，现在应该趁着这股劲，利用手上的资源，赶紧再开始一个B计划。”当天晚上他就飞回了硅谷，开始创办LinkedIn。有意思的是，PayPal的好多其他元老们在全世界旅游了一年回来以后，正闲的发慌，结果发现LinkedIn已经在蒸蒸日上了，不禁吃了一惊，后悔他们错过了这一班车…</p><p><strong>以下是一些小Tip，让我们在探索自己的航线时尽量提高效率、降低风险：</strong></p><p>开始一个兼职小项目（side project）。除非你需要立刻做出一个决定，否则的话一个非常好的开始B计划的方法是给自己一份空闲时间干的事情。比如说，利用晚上和周末的时间来学一个技能，做一份兼职的实习，开一个兼职的咨询服务，等等。我们讲的这个兼职计划和业余爱好等这种完全陶冶情操的活动不一样，它指的是一个有着成为全职工作潜力的事情，只要在时机成熟，你就可以做出转变。就跟Google和3M这样的公司让员工每周花一天的时间在自己觉得有意思的项目上一样，我们完全可以自己个自己也制定一个这样的计划。</p><p>人一辈子不管在哪个阶段，都应该把学习作为是对自己最重要的事情。一般来说，世界上大部分人的教育在从学校出来以后就基本上停止了。可能逐渐的他们看电视剧的时间会远远超过充实自己的头脑的时间，人们会投资股票，不会去投资自己。在这个问题上大家可能有不同看法，毕竟人们还是要生活的，钱财也是需要管理的。不过Reid Hoffman建议大家在不管什么时候，应该永远优先选择那些能提高自己能力的活动。（我插一句，这个确实反映了从富兰克林时代就开始的那种美国式的、完全实用主义的勤学价值观）</p><p>给自己两个身份，一个人拥有双重身份能带来哪些好处？我见过很多人在做自己的全职商业工作的同时还做一份非营利组织的工作，这两件事情经常能够相互促进。比如说你在一家创业公司工作，然后在空闲时间再组织一个行业协会，协会里遇到的人经常可以给自己的全职工作也带来发展，这是直接第一点比较“有用”的好处。另外，我们也知道这种跨领域的经历是创造力最容易迸发的地方。</p><p>还有一个做法，就是试图把完全的“被工作定义的自己”和自己区分开。也就是说，不要用一个工作简历上的描述把自己给定死。比如说，在自己的LinkedIn主页上，大标题一栏可以不要写一个具体的公司的工作，而写自己的职业总体方向和追求。这是因为，如果你只关注某个人现在在做什么工作，那你可能会漏过很多这个人身上其他的价值。比如说某人是大公司高管，但他同时也很有可能是一个天使投资人。自然，我们在对外展示自己的时候也应该努力展示多个方面，因为人们会用同样的方式来看我们。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们一向把创业视为一件非常有风险的事。说起来挺矛盾，创业者经常看不起那些职场金领，但是前者在后者眼中也只是一群吃了上顿没下顿的流浪汉而已。所以这里最大的挑战就是：一个人如何让自己勇于拓展机会，但同时又不要冒太大风险，乃至于丢掉饭碗血本无归？讲到成功的把这两点结合在一起的方法
      
    
    </summary>
    
      <category term="职业规划" scheme="https://www.myhuangzhuo.com/categories/%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    
    
      <category term="ABZ" scheme="https://www.myhuangzhuo.com/tags/ABZ/"/>
    
      <category term="plan" scheme="https://www.myhuangzhuo.com/tags/plan/"/>
    
  </entry>
  
</feed>
